{"version":3,"sources":["App.styles.ts","components/ListItem/index.tsx","components/AddArea/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Container","styled","div","Area","Header","h1","ListItem","item","onChange","done","type","checked","e","id","target","name","AddArea","onEnter","useState","inputText","setInputText","className","placeholder","value","onKeyUp","code","App","list","setList","handleTaskChange","newList","i","taskName","push","length","map","index","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2NAEaA,EAAYC,IAAOC,IAAV,mGAMTC,EAAOF,IAAOC,IAAV,oFAMJE,EAAUH,IAAOI,GAAX,2J,OCFNC,EAAW,SAAC,GAA+B,IAA7BC,EAA4B,EAA5BA,KAAMC,EAAsB,EAAtBA,SAE/B,OACE,eAAC,EAAD,CAAWC,KAAMF,EAAKE,KAAtB,UACE,uBACEC,KAAK,WACLC,QAASJ,EAAKE,KACdD,SAAU,SAAAI,GAAC,OAAIJ,EAASD,EAAKM,GAAID,EAAEE,OAAOH,YAE5C,gCAAQJ,EAAKQ,WAKbf,EAAYC,IAAOC,KAAI,gBAAGO,EAAH,EAAGA,KAAH,2RAeNA,EAAO,eAAiB,UAflB,eCnBhBO,EAAU,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,QAExB,EAAkCC,mBAAS,IAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KASA,OACE,eAAC,EAAD,WACE,qBAAKC,UAAU,QAAf,oBACA,uBACEX,KAAK,OACLY,YAAY,sBACZC,MAAOJ,EACPX,SAAU,SAAAI,GAAC,OAAIQ,EAAaR,EAAEE,OAAOS,QACrCC,QAfc,SAACZ,GACJ,UAAXA,EAAEa,MAAkC,KAAdN,IACxBF,EAAQE,GACRC,EAAa,YAkBNpB,EAAYC,IAAOC,IAAV,8UC8BPwB,EAxDH,WAEV,MAAwBR,mBAAiB,CACvC,CACEL,GAAI,EACJE,KAAM,8BACNN,MAAM,GAER,CACEI,GAAI,EACJE,KAAM,kBACNN,MAAM,KATV,mBAAOkB,EAAP,KAAaC,EAAb,KAuBMC,EAAmB,SAAChB,EAAYJ,GACpC,IAAIqB,EAAO,YAAOH,GAClB,IAAK,IAAII,KAAKD,EACRA,EAAQC,GAAGlB,KAAOA,IACpBiB,EAAQC,GAAGtB,KAAOA,GAGtBmB,EAAQE,IAGV,OACE,cAAC,EAAD,UACE,eAAC,EAAD,WACE,cAAC,EAAD,+BAIA,cAAC,EAAD,CAASb,QA3BO,SAACe,GACrB,IAAIF,EAAO,YAAOH,GAClBG,EAAQG,KAAK,CACXpB,GAAIc,EAAKO,OAAS,EAClBnB,KAAMiB,EACNvB,MAAM,IAERmB,EAAQE,MAsBHH,EAAKQ,KAAI,SAAC5B,EAAM6B,GAAP,OACR,cAAC,EAAD,CAEE7B,KAAMA,EACNC,SAAUqB,GAFLO,YCtCFC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.a18e4552.chunk.js","sourcesContent":["import styled from 'styled-components'\r\n\r\nexport const Container = styled.div`\r\n  background-color: #17181f;\r\n  color: #797a81;\r\n  min-height: 100vh;\r\n`\r\n\r\nexport const Area = styled.div`\r\n  margin: auto;\r\n  max-width: 980px;\r\n  padding: 10px;\r\n`\r\n\r\nexport const Header =  styled.h1`\r\n  margin: 0;\r\n  padding: 0;\r\n  color: #fff;\r\n  text-align: center;\r\n  border-bottom: 1px solid #444;\r\n  padding-bottom: 20px;\r\n`","import styled from 'styled-components'\r\nimport { Item } from '../../types/Item'\r\n\r\ntype Props = {\r\n  item: Item,\r\n  onChange: (id: number, done: boolean) => void\r\n}\r\n\r\ntype ContainerProps = {\r\n  done: boolean;\r\n}\r\n\r\nexport const ListItem = ({ item, onChange }: Props) => {\r\n\r\n  return (\r\n    <Container done={item.done} >\r\n      <input \r\n        type=\"checkbox\" \r\n        checked={item.done}\r\n        onChange={e => onChange(item.id, e.target.checked)} \r\n      />\r\n      <label>{item.name}</label>\r\n    </Container>\r\n  )\r\n}\r\n\r\nconst Container = styled.div(({ done }: ContainerProps) => (\r\n  `\r\n  display: flex;\r\n  background-color: #20212c;\r\n  padding: 10px;\r\n  border-radius: 10px;\r\n  margin-bottom: 10px;\r\n  align-items: center;\r\n  input {\r\n    width: 25px;\r\n    height: 25px;\r\n    margin-right: 5px;\r\n  }\r\n  label {\r\n    color: #ccc;\r\n    text-decoration: ${done ? 'line-through' : 'initial'};\r\n  }\r\n`\r\n))","import { useState, KeyboardEvent } from 'react'\r\nimport styled from 'styled-components'\r\n\r\ntype Props = {\r\n  onEnter: (taskName: string) => void\r\n}\r\n\r\nexport const AddArea = ({ onEnter }: Props) => {\r\n\r\n  const [inputText, setInputText] = useState('')\r\n\r\n  const handleKeyUp = (e: KeyboardEvent) => {\r\n    if (e.code === 'Enter' && inputText !== '') {\r\n      onEnter(inputText)\r\n      setInputText('')\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Container>\r\n      <div className=\"image\">➕</div>\r\n      <input \r\n        type=\"text\"\r\n        placeholder=\"Adicione uma tarefa\"\r\n        value={inputText}\r\n        onChange={e => setInputText(e.target.value)}\r\n        onKeyUp={handleKeyUp}\r\n      />\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport const Container = styled.div`\r\n  border: 1px solid #555;\r\n  border-radius: 15px;\r\n  padding: 10px;\r\n  margin: 20px 0;\r\n  display: flex;\r\n  align-items: center;\r\n  .image {\r\n    margin-right: 5px;\r\n  }\r\n  input {\r\n    border: 0px;\r\n    background: transparent;\r\n    outline: 0;\r\n    color: #fff;\r\n    font-size: 18px;\r\n    flex: 1;\r\n  }\r\n`","import { useState } from 'react'\nimport * as C from './App.styles'\nimport { Item } from './types/Item'\nimport { ListItem } from './components/ListItem'\nimport { AddArea } from './components/AddArea'\n\nconst App = () => {\n\n  const [list, setList] = useState<Item[]>([\n    {\n      id: 1,\n      name: 'Comprar o pão na padaria',\n      done: false\n    },\n    {\n      id: 2,\n      name: 'Comprar um bolo',\n      done: true\n    }\n  ])\n\n  const handleAddTask = (taskName: string) => {\n    let newList = [...list]\n    newList.push({\n      id: list.length + 1,\n      name: taskName,\n      done: false\n    })\n    setList(newList)\n  }\n\n  const handleTaskChange = (id: number, done: boolean) => {\n    let newList = [...list]\n    for (let i in newList) {\n      if (newList[i].id === id) {\n        newList[i].done = done\n      }\n    }\n    setList(newList)\n  }\n\n  return (\n    <C.Container>\n      <C.Area>\n        <C.Header>\n          Lista de Tarefas\n        </C.Header>\n\n        <AddArea onEnter={handleAddTask} />\n\n        {list.map((item, index) => (\n          <ListItem \n            key={index} \n            item={item}\n            onChange={handleTaskChange}\n          />\n        ))}\n      </C.Area>\n    </C.Container>\n  )\n}\n\nexport default App","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}